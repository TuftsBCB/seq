package seq

import (
	"fmt"
	"strings"
	"testing"
)

type alignTest struct {
	seq1, seq2 string
	out1, out2 string
	subst      MatLookup
}

var alignTests = []alignTest{
	{
		"ASAECVSNENVEIEAPKTNIWTSLAKEEVQEVLDLLHSTYNITEVTKADFFSNYVLWIETLKPN" +
			"KTEALTYLDEDGDLPPRNARTVVYFGEGEEGYFEELKVGPLPVSDETTIEPLSFYNTNGK" +
			"SKLPFEVGHLDRIKSAAKSSFLNKNLNTTIMRDVLEGLIGVPYEDMGCHSAAPQLHDPAT" +
			"GATVDYGTCNINTENDAENLVPTGFFFKFDMTGRDVSQWKMLEYIYNNKVYTSAEELYEA" +
			"MQKDDFVTLPKIDVDNLDWTVIQRNDSAPVRHLDDRKSPRLVEPEGRRWAYDGDEEYFSW" +
			"MDWGFYTSWSRDTGISFYDITFKGERIVYELSLQELIAEYGSDDPFNQHTFYSDISYGVG" +
			"NRFSLVPGYDCPSTAGYFTTDTFEYDEFYNRTLSYCVFENQEDYSLLRHTGASYSAITQN" +
			"PTLNVRFISTIGNYDYNFLYKFFLDGTLEVSVRAAGYIQAGYWNPETSAPYGLKIHDVLS" +
			"GSFHDHVLNYKVDLDVGGTKNRASQYVMKDVDVEYPWAPGTVYNTKQIAREVFENEDFNG" +
			"INWPENGQGILLIESAEETNSFGNPRAYNIMPGGGGVHRIVKNSRSGPETQNWARSNLFL" +
			"TKHKDTELRSSTALNTNALYDPPVNFNAFLDDESLDGEDIVAWVNLGLHHLPNSNDLPNT" +
			"IFSTAHASFMLTPFNYFDSENSRDTTQQVFYTYDDETEESNWEFYGNDWSSCGVEVAEPN" +
			"FEDYTYGRGTRINKKMTNSDEVY",
		"AECVSNENVEIEAPKTNIWTSLAKEEVQEVLDLLHSTYNITEVTKADFFSNYVLWIETLKPNKT" +
			"EALTYLDEDGDLPPRNARTVVYFGEGEEGYFEELKVGPLPVSDETTIEPLSFYNTNGKSK" +
			"LPFEVGHLDRIKSAAKSSFLNKNLNTTIMRDVLEGLIGVPYEDMGCHSAAPQLHDPATGA" +
			"TVDYGTCNINTENDAENLVPTGFFFKFDMTGRDVSQWKMLEYIYNNKVYTSAEELYEAMQ" +
			"KDDFVTLPKIDVDNLDWTVIQRNDSAPVRHLDDRKSPRLVEPEGRRWAYDGDEEYFSWMD" +
			"WGFYTSWSRDTGISFYDITFKGERIVYELSLQELIAEYGSDDPFNQHTFYSDISYGVGNR" +
			"FSLVPGYDCPSTAGYFTTDTFEYDEFYNRTLSYCVFENQEDYSLLRHTGASYSAITQNPT" +
			"LNVRFISTIGNDYNFLYKFFLDGTLEVSVRAAGYIQAGYWNPETSAPYGLKIHDVLSGSF" +
			"HDHVLNYKVDLDVGGTKNRASQYVMKDVDVEYPWAPGTVYNTKQIAREVFENEDFNGINW" +
			"PENGQGILLIESAEETNSFGNPRAYNIMPGGGGVHRIVKNSRSGPETQNWARSNLFLTKH" +
			"KDTELRSSTALNTNALYDPPVNFNAFLDDESLDGEDIVAWVNLGLHHLPNSNDLPNTIFS" +
			"TAHASFMLTPFNYFDSENSRDTTQQVFYTYDDETEESNWEFYGNDWSSCGVEVAEPNFED" +
			"YTYGRGTRINKK",
		"ASAECVSNENVEIEAPKTNIWTSLAKEEVQEVLDLLHSTYNITEVTKADFFSNYVLWIETLKPN" +
			"KTEALTYLDEDGDLPPRNARTVVYFGEGEEGYFEELKVGPLPVSDETTIEPLSFYNTNGK" +
			"SKLPFEVGHLDRIKSAAKSSFLNKNLNTTIMRDVLEGLIGVPYEDMGCHSAAPQLHDPAT" +
			"GATVDYGTCNINTENDAENLVPTGFFFKFDMTGRDVSQWKMLEYIYNNKVYTSAEELYEA" +
			"MQKDDFVTLPKIDVDNLDWTVIQRNDSAPVRHLDDRKSPRLVEPEGRRWAYDGDEEYFSW" +
			"MDWGFYTSWSRDTGISFYDITFKGERIVYELSLQELIAEYGSDDPFNQHTFYSDISYGVG" +
			"NRFSLVPGYDCPSTAGYFTTDTFEYDEFYNRTLSYCVFENQEDYSLLRHTGASYSAITQN" +
			"PTLNVRFISTIGNYDYNFLYKFFLDGTLEVSVRAAGYIQAGYWNPETSAPYGLKIHDVLS" +
			"GSFHDHVLNYKVDLDVGGTKNRASQYVMKDVDVEYPWAPGTVYNTKQIAREVFENEDFNG" +
			"INWPENGQGILLIESAEETNSFGNPRAYNIMPGGGGVHRIVKNSRSGPETQNWARSNLFL" +
			"TKHKDTELRSSTALNTNALYDPPVNFNAFLDDESLDGEDIVAWVNLGLHHLPNSNDLPNT" +
			"IFSTAHASFMLTPFNYFDSENSRDTTQQVFYTYDDETEESNWEFYGNDWSSCGVEVAEPN" +
			"FEDYTYGRGTRINKKMTNSDEVY",
		"--AECVSNENVEIEAPKTNIWTSLAKEEVQEVLDLLHSTYNITEVTKADFFSNYVLWIETLKPN" +
			"KTEALTYLDEDGDLPPRNARTVVYFGEGEEGYFEELKVGPLPVSDETTIEPLSFYNTNGK" +
			"SKLPFEVGHLDRIKSAAKSSFLNKNLNTTIMRDVLEGLIGVPYEDMGCHSAAPQLHDPAT" +
			"GATVDYGTCNINTENDAENLVPTGFFFKFDMTGRDVSQWKMLEYIYNNKVYTSAEELYEA" +
			"MQKDDFVTLPKIDVDNLDWTVIQRNDSAPVRHLDDRKSPRLVEPEGRRWAYDGDEEYFSW" +
			"MDWGFYTSWSRDTGISFYDITFKGERIVYELSLQELIAEYGSDDPFNQHTFYSDISYGVG" +
			"NRFSLVPGYDCPSTAGYFTTDTFEYDEFYNRTLSYCVFENQEDYSLLRHTGASYSAITQN" +
			"PTLNVRFISTIGN-DYNFLYKFFLDGTLEVSVRAAGYIQAGYWNPETSAPYGLKIHDVLS" +
			"GSFHDHVLNYKVDLDVGGTKNRASQYVMKDVDVEYPWAPGTVYNTKQIAREVFENEDFNG" +
			"INWPENGQGILLIESAEETNSFGNPRAYNIMPGGGGVHRIVKNSRSGPETQNWARSNLFL" +
			"TKHKDTELRSSTALNTNALYDPPVNFNAFLDDESLDGEDIVAWVNLGLHHLPNSNDLPNT" +
			"IFSTAHASFMLTPFNYFDSENSRDTTQQVFYTYDDETEESNWEFYGNDWSSCGVEVAEPN" +
			"FEDYTYGRGTRINKK--------",
		MatBlosum62,
	},
	{
		"ABCD",
		"ABCD",
		"ABCD",
		"ABCD",
		MatBlosum62,
	},
	{
		"GHIKLMNPQR",
		"GAAAHIKLMN",
		"G---HIKLMNPQR",
		"GAAAHIKLMN---",
		MatBlosum62,
	},
	{
		"GHIKLMNPQRSTVW",
		"GAAAHIKLMNPQRSTVW",
		"G---HIKLMNPQRSTVW",
		"GAAAHIKLMNPQRSTVW",
		MatBlosum62,
	},
	{
		"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
		"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
		"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
		"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
		MatBlosum62,
	},
	{
		"NNNNNNNN",
		"NNNNNNNN",
		"NNNNNNNN",
		"NNNNNNNN",
		MatBlosum62,
	},
	{
		"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
		"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
		"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
		"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN",
		MatBlosum62,
	},
	{
		"ABCDEFGWXYZ",
		"ABCDEFMNPQRSTZABEGWXYZ",
		"ABCDEF-----------GWXYZ",
		"ABCDEFMNPQRSTZABEGWXYZ",
		MatBlosum62,
	},
	{
		"ACTG",
		"ACTG",
		"ACTG",
		"ACTG",
		MatDNA,
	},
}

func BenchmarkNeedlemanWunsch(b *testing.B) {
	for i := 0; i < b.N; i++ {
		test := alignTests[0]
		s1, s2 := stringToSeq(test.seq1), stringToSeq(test.seq2)
		NeedlemanWunsch(s1, s2, test.subst)
	}
}

func TestNeedlemanWunsch(t *testing.T) {
	sep := strings.Repeat("-", 45)
	for _, test := range alignTests {
		s1, s2 := stringToSeq(test.seq1), stringToSeq(test.seq2)
		substitution := test.subst
		aligned := NeedlemanWunsch(s1, s2, substitution)
		sout1 := fmt.Sprintf("%s", aligned.A)
		sout2 := fmt.Sprintf("%s", aligned.B)

		if sout1 != test.out1 || sout2 != test.out2 {
			t.Fatalf(
				`Alignment for (%d, %d):
%s
%s
%s
%s
resulted in (%d, %d)
%s
%s
%s
%s
but should have been (%d, %d)
%s
%s
%s
%s`,
				len(test.seq1), len(test.seq2),
				sep, test.seq1, test.seq2, sep,
				len(sout1), len(sout2),
				sep, sout1, sout2, sep,
				len(test.out1), len(test.out2),
				sep, test.out1, test.out2, sep)
		}
	}
}

func ExampleNeedlemanWunsch() {
	s1 := NewSequenceString("seq1", "GHIKLMNPQR")
	s2 := NewSequenceString("seq1", "GAAAHIKLMN")
	aligned := NeedlemanWunsch(s1.Residues, s2.Residues, MatBlosum62)

	fmt.Printf("%s\n", aligned.A)
	fmt.Printf("%s\n", aligned.B)
	// Output:
	// G---HIKLMNPQR
	// GAAAHIKLMN---
}

func stringToSeq(s string) []Residue {
	residues := make([]Residue, len(s))
	for i := range s {
		residues[i] = Residue(s[i])
	}
	return residues
}
